{"version":3,"sources":["components/BinaryTree.tsx","components/NeighborsTable.tsx","components/AddToTree.tsx","components/RightPanel.tsx","App.tsx","index.tsx"],"names":["BinaryTree","props","className","data","NeighborsTable","rightNeighbors","map","item","index","key","AddToTree","input","document","querySelector","button","addEventListener","event","keyCode","click","type","placeholder","onClick","this","React","Component","RightPanel","neighborsTableProps","addToTreeProps","Node","right","left","BinarySearchTree","root","newNode","insertNode","currentNodes","push","nodesToVisit","neighborsTable","length","i","dfs","node","output","name","String","children","unshift","App","binaryTree","insert","state","tree","inputData","value","split","copiedTree","Object","assign","create","getPrototypeOf","Number","setState","handleAdditionToTree","treeData","transformToD3Hierarchy","getAllRightNeighbors","width","height","svgProps","transform","textProps","animated","nodeRadius","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.8c4538f2.chunk.js","sourcesContent":["import React from 'react';\nimport Tree from 'react-tree-graph';\nimport 'react-tree-graph/dist/style.css';\nimport { D3Hierarchy } from '../App';\n\ninterface BinaryTreeProps {\n    data: D3Hierarchy | null;\n    width: number;\n    height: number;\n    svgProps: object;\n    textProps: object;\n    animated: boolean;\n    nodeRadius: number;\n}\n\nexport default function BinaryTree(props: BinaryTreeProps) {\n    return (\n        <div className=\"binary-tree\">\n            <h1>Бинарное дерево поиска</h1>\n            {\n                (props.data !== null) ? (<Tree {...props} />) : (<h1>Ноды отсутствуют (дерево пустое)</h1>)\n            }\n        </div>\n    )\n}\n","import React from 'react';\nimport { Node } from '../App';\n\nexport interface NeighborsTableProps {\n    rightNeighbors: Node[][] | null;\n}\n\nexport default function NeighborsTable(props: NeighborsTableProps) {\n    return (\n        <div className=\"neighbors-table\">\n            <h1>Таблица найденных соседей (обновляется автоматически):</h1>\n            {\n                (props.rightNeighbors !== null) ? (\n                    <table>\n                        <tbody>\n                            {(props.rightNeighbors as Node[][]).map((item: Node[], index) => {\n                                return (\n                                    <tr key={index}>\n                                        <td>{item[0].data}</td>\n                                        <td>→</td>\n                                        <td>{item[1].data}</td>\n                                    </tr>\n                                )\n                            })}\n                        </tbody>\n                    </table>\n                ) : (\n                    'Нет правых соседей'\n                )\n            }\n        </div>\n    )\n}","import React from 'react';\n\ninterface AddToTreeProps {\n    onClick: () => void;\n}\n\nexport default class AddToTree extends React.Component<AddToTreeProps> {\n    componentDidMount() {\n        const input = document.querySelector('input') as HTMLInputElement;\n        const button = document.querySelector('button') as HTMLButtonElement;\n        input.addEventListener('keyup', function(event) {\n            if ((event as KeyboardEvent).keyCode === 13) {\n                button.click();\n            }\n        });\n    }\n\n    render() {\n        return (\n            <div className=\"add-to-tree\">\n                <h1>Добавить ноды в дерево (символ пробела - разделитель)</h1>\n                <input type=\"text\" placeholder=\"78 1 23\" />\n                <button onClick={this.props.onClick}>Добавить</button>\n            </div>\n        )\n    }\n}","import React from 'react';\nimport NeighborsTable, { NeighborsTableProps } from './NeighborsTable';\nimport AddToTree from './AddToTree';\n\ninterface RightPanelProps {\n    neighborsTableProps: NeighborsTableProps;\n    addToTreeProps: {\n        onClick: () => void;\n    };\n}\n\nexport default function RightPanel(props: RightPanelProps) {\n    return (\n        <div className=\"right-panel\">\n            <NeighborsTable rightNeighbors={props.neighborsTableProps.rightNeighbors} />\n            <AddToTree onClick={props.addToTreeProps.onClick} />\n        </div>\n    )\n}","import React from 'react';\nimport './App.css';\nimport BinaryTree from './components/BinaryTree';\nimport RightPanel from './components/RightPanel';\nimport { NeighborsTableProps } from './components/NeighborsTable';\n\nexport class Node {\n  data: number;\n  right: Node | null;\n  left: Node | null;\n\tconstructor(data: number) {\n\t\tthis.data = data;\n\t\tthis.right = null;\n\t\tthis.left = null;\n\t}\n}\n\nexport interface D3Hierarchy {\n    name: string;\n    children?: D3Hierarchy[];\n}\n\nclass BinarySearchTree {\n    root: Node | null;\n\tconstructor() {\n\t\tthis.root = null;\n\t}\n\n\tinsert(data: number) {\n\t\tconst newNode = new Node(data);\n\n\t\tif (this.root === null) {\n\t\t\tthis.root = newNode;\n\t\t} else {\n\t\t\tthis.insertNode(this.root, newNode);\n\t\t}\n\t}\n\n\tinsertNode(root: Node, newNode: Node) {\n\t\tif (newNode.data < root.data) {\n\t\t\tif (root.left === null) {\n\t\t\t\troot.left = newNode;\n\t\t\t} else {\n\t\t\t\tthis.insertNode(root.left, newNode);\n\t\t\t}\n\t\t} else {\n\t\t\tif (root.right === null) {\n\t\t\t\troot.right = newNode;\n\t\t\t} else {\n\t\t\t\tthis.insertNode(root.right, newNode);\n\t\t\t}\n\t\t}\n\t}\n\n\tgetAllRightNeighbors() {\n        let currentNodes = [];\n        if (this.root !== null) {\n            currentNodes.push(this.root);\n        }\n\t\tlet nodesToVisit = [];\n\t\tconst neighborsTable = [];\n\n\t\twhile (currentNodes.length !== 0) {\n\t\t\tfor (let i = 0; i < currentNodes.length; i++) {\n\t\t\t\tif ((currentNodes[i] as Node).left !== null) {\n\t\t\t\t\tnodesToVisit.push((currentNodes[i] as Node).left);\n\t\t\t\t}\n\t\t\t\tif ((currentNodes[i] as Node).right !== null) {\n\t\t\t\t\tnodesToVisit.push((currentNodes[i] as Node).right);\n\t\t\t\t}\n\t\t\t\tif (i !== 0) {\n\t\t\t\t\tneighborsTable.push([currentNodes[i - 1], currentNodes[i]])\n\t\t\t\t}\n\t\t\t}\n\t\t\tcurrentNodes = nodesToVisit;\n\t\t\tnodesToVisit = [];\n\t\t}\n\n\t\treturn (neighborsTable as Node[][])\n    }\n  \n    transformToD3Hierarchy(): D3Hierarchy | null {\n        // depth first traverse\n        function dfs(node: Node | null) {\n            if (node !== null) {\n                const output: D3Hierarchy = {\n                    name: String(node.data)\n                };\n                output.name = String(node.data);\n                if (node.left !== null) {\n                    output.children = [];\n                    output.children.push(dfs(node.left) as D3Hierarchy);\n                }\n                if (node.right !== null) {\n                    if (!output.children) {\n                        output.children = [];\n                    }\n                    output.children.unshift(dfs(node.right) as D3Hierarchy);\n                }\n                return output\n            }\n\t\t    return null\n\t    }\n\t    return dfs(this.root)\n    }\n}\n\ninterface AppState {\n    tree: BinarySearchTree;\n}\n\nclass App extends React.Component<{}, AppState> {\n    // компонент не имеет пропсов, но пришлось указать что-то чтобы вызвать конструктор\n    constructor(props: any) {\n        super(props);\n        // создаем дерево и вставляем в него несколько нод\n        const binaryTree = new BinarySearchTree();\n        binaryTree.insert(9)\n        binaryTree.insert(5)\n        binaryTree.insert(7)\n        binaryTree.insert(6)\n        binaryTree.insert(8)\n        binaryTree.insert(11)\n        binaryTree.insert(10)\n        binaryTree.insert(2)\n        binaryTree.insert(12)\n        this.state = {\n            tree: binaryTree\n        };\n    }\n\n    handleAdditionToTree() {\n        const input = document.querySelector('input') as HTMLInputElement;\n        const inputData = input.value;\n        if (inputData.length === 0) {\n            return\n        }\n        input.value = '';\n        const data: string[] = inputData.split(' ');\n\n        // копируем текущее дерево чтобы не мутировать this.state\n        // копируем вместе с прототипом, чтобы были доступны методы класса\n        const copiedTree = Object.assign(Object.create(Object.getPrototypeOf(this.state.tree)), this.state.tree);\n        for (let item of data) {\n            copiedTree.insert(Number(item));\n        }\n        this.setState({\n            tree: copiedTree\n        });\n    }\n\n    render() {\n        const addToTreeProps = {\n            onClick: () => {this.handleAdditionToTree()}\n        };\n\n        const treeData = this.state.tree.transformToD3Hierarchy();\n\n        const neighborsTableProps: NeighborsTableProps = {\n            rightNeighbors: this.state.tree.getAllRightNeighbors()\n        };\n\n        return (\n            <div className=\"App\">\n                <h1>Найти всех правых соседей в бинарном дереве</h1>\n                <div className=\"row\">\n                    <BinaryTree \n                    data={treeData} \n                    width={800} \n                    height={800} \n                    svgProps={{\n                    transform: \"rotate(90)\"\n                    }} \n                    textProps={{\n                    transform: \"rotate(270)\"\n                    }} \n                    animated={true} \n                    nodeRadius={10} \n                    />\n                    <RightPanel \n                    neighborsTableProps={neighborsTableProps} \n                    addToTreeProps={addToTreeProps} \n                    />\n                </div>\n            </div>\n        )\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}